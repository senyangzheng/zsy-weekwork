# 应用连接 Sharding-Proxy 的数据库名称
schemaName: sharding_db

dataSourceCommon:
  username: root
  password: 123456
  connectionTimeoutMilliseconds: 30000
  idleTimeoutMilliseconds: 60000
  maxLifetimeMilliseconds: 1800000
  maxPoolSize: 50
  minPoolSize: 1
  maintenanceIntervalMilliseconds: 30000

dataSources:
  ds_0:
    url: jdbc:mysql://127.0.0.1:3306/sharding_sphere_test_01?serverTimezone=UTC&useSSL=false
  ds_1:
    url: jdbc:mysql://127.0.0.1:3306/sharding_sphere_test_02?serverTimezone=UTC&useSSL=false

rules:
  - !SHARDING
    tables:
      t_order:
        actualDataNodes: ds_${0..1}.order_${0..15}
        tableStrategy:
          standard:
            shardingColumn: order_id
            shardingAlgorithmName: t_order_inline
        keyGenerateStrategy:
          column: order_id
          keyGeneratorName: snowflake
        # t_order_item:
        #   actualDataNodes: ds_${0..1}.t_order_item_${0..1}
        #   tableStrategy:
        #     standard:
        #       shardingColumn: order_id
        #       shardingAlgorithmName: t_order_item_inline
        # keyGenerateStrategy:
        #   column: order_item_id
        #   keyGeneratorName: snowflake
    # bindingTables:
    #   - t_order,t_order_item
    defaultDatabaseStrategy:
      standard:
        shardingColumn: user_id
        shardingAlgorithmName: database_inline
    defaultTableStrategy:
      none:

    shardingAlgorithms:
      database_inline:
        type: INLINE
        props:
          algorithm-expression: ds_${user_id % 2}
      t_order_inline:
        type: INLINE
        props:
          algorithm-expression: order_${order_id % 16}
      # t_order_item_inline:
      #   type: INLINE
      #   props:
      #     algorithm-expression: t_order_item_${order_id % 2}

    keyGenerators:
      snowflake:
        type: SNOWFLAKE
        props:
          worker-id: 123